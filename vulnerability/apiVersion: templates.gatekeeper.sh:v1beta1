apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: k8srequirednamespacecontainers
spec:
  crd:
    spec:
      names:
        kind: K8sRequiredNamespaceContainers
      validation:
        openAPIV3Schema:
          type: object
          properties:
            namespace:
              type: string
            requiredContainers:
              type: array
              items:
                type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8srequirednamespacecontainers

        violation[{"msg": msg, "details": {"missingContainers": missing_containers}}] {
          input.review.kind.kind == "Pod"
          input.review.kind.apiGroup == ""

          # Check if the pod is in the specified namespace
          input.review.object.metadata.namespace == input.parameters.namespace

          # Gather all running containers in the namespace
          namespace_pods := data.inventory.namespace_pods[input.parameters.namespace]

          # Find missing required containers
          missing_containers := {container | 
            container := input.parameters.requiredContainers[_]; 
            not any(namespace_pods, func(pod) { container_in_pod(container, pod.spec.containers) })
          }
          
          count(missing_containers) > 0
          
          msg := sprintf("Namespace %s is missing required containers: %v", [input.parameters.namespace, missing_containers])
        }

        container_in_pod(container, containers) {
          containers[_].name == container
        }
        
        any(xs, p) = true {
          some x in xs satisfies p(x)
        }
        any(xs, p) = false {
          not some x in xs satisfies p(x)
        }